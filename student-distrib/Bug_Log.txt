Format
==============
Bug #
Bug:
Topic:
Fix:
Location of Fix:
Estimated Time:
==============

/*
|===================================================|
|					CP 1 BUGS						|
|===================================================|
*/

Bug #1
Bug: IDT was causing Error 13, general fault
Topic: IDT
Fix: We had to init every single value in table, not just the ones we had (256 instead of 50)
Location of Fix: interrupt_hanlder.c
Estimated Time: 2hr


Bug #2
Bug: We did not need assembly linkage for every exception, caused error
Topic: IDT
Fix: Removed asm function calls for exceptions and only kept the ones for RTC and KB
Location of Fix: interrupt_hanlder.c new_link.S
Estimated Time: 1hr


Bug #3
Bug: initiliazed PIC before IDT, unexpected behavior
Topic: IDT
Fix: chagned init order
Location of Fix: kernel.C
Estimated Time: 30 mins


Bug #4
Bug: Double print of Chars
Topic: Keyboard
Fix: check after printing if there is a scan code with diff
    128 waiting to be printed
Location of Fix: keyboard.c
Estimated Time: 1hr


Bug #5
Bug: Bootlooping when paging "enabled"
Topic: Paging
Fix: Fix the order in which the control registers are set to enable paging. Solution further explained in code @ memory.c
Location of Fix: memory.c
Estimated Time: 1 hour


Bug #6
Bug: Bootlooping when testing paging funcitoanlity
Topic: Paging
Fix: We're aware that in order to test paging, you need to "break it", but I think we broke it too much. IDT hasnt been set up yet to handle page faults. This should fix itself after page faults get handled.
Location of Fix: IDT file
Estimated Time: 1hr

/*
|===================================================|
|					CP 2 BUGS						|
|===================================================|
*/

Bug #7
Bug: Keyboard will print diff char on release
Topic: Keyboard
Fix: Listned for keypress and key release
Location of Fix: keyboard.c
Estimated Time: 1hr


Bug #8
Bug: Backspace was causing page faults
Topic: Keyboard
Fix: make sure not to go into negative video mem space. Added IF statement to check if kb_idx is > 0
Location of Fix: keyboard.c
Estimated Time: 20 mins


Bug #9
Bug: character max was met before typing 127 chars
Topic: keyboard
Fix: had to decrement kb_idx after deleting printed char
Location of Fix: keyboard.c 
Estimated Time: 30 mins


Bug #10
Bug: After shifting text up for scrolling the last line would be copied over
Topic: terminal 
Fix: clear the line with putting ' '
Location of Fix: lib.c 
Estimated Time: 30 mins 


Bug #11
Bug: Frequency of RTC never changing to correct value during testing and only going to highest frequency. 
Topic: RTC
Fix: I was passing in the wrong type as the buffer into the write function for RTC in testing. To fix this, I made sure the temporary variable
used for this argument was of the correct type (int32_t).
Location of Fix: tests.c
Estimated Time: 1.5 hours


Bug #12
Bug: Executbale files not printing correct
Topic: Filesystem
Fix: We were treating executables just like text files. This is an issue because text files had new lines characters to bring curos to next line. Executable does not have these, so the file overwrote itself on same row until seeing new line character. Had to implement counter to add new line when reading executable.
Location of Fix: Filesystem.c
Estimated Time: 4 hours


Bug #13
Bug: Grabbing more data than necessary
Topic: Filesystem
Fix: When sstarting to travere the files system, i found that pointer types matter for traversing. For example if you incremnet a 32 bit bointer, you are increasing adresses by 4 bytes. When incrementing 8 bit pointer you are increasing address by one byte.
Location of Fix: Filesystem.c
Estimated Time: 1 hour

Bug #14
Bug: tab would break the buffer
Topic: keyboard
Fix: added an if statemnt for the tab scan code 
Location of Fix: keyboard.c
Estimated Time: 15 mins

Bug #15
Bug: last space in last line would not be re-written with ' '
Topic: putc
Fix: made sure to re-write the entire line while(idx<NUM_COLS) instead of while(idx<NUM_COLS-1){
Location of Fix: lib.c
Estimated Time: 30 mins
